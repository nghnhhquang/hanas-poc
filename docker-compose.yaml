services:
  vault:
    image: hashicorp/vault:1.17.2
    restart: always
    volumes:
      - vault-logs:/vault/logs/:rw
      - vault-data:/vault/data/:rw
      - ./plugin:/vault/plugin/:rw
      - ./config:/vault/config/:rw
      - ./certs:/etc/certs/:z
    ports:
      - 8200:8200
    cap_add:
      - IPC_LOCK
    entrypoint: vault server -config /vault/config/config.hcl
  gateway:
    image: nghnhhquang/ranger-gateway:latest
    restart: always
    depends_on:
      - redis
      - ranger
      - vault
      - nginx
    environment:
      TZ: Asia/Jakarta
      ASPNETCORE_ENVIRONMENT: poc
    ports:
      - 5500:8080
    volumes:
      - ./appsettings.poc.json:/app/appsettings.poc.json
    extra_hosts:
      - "vault.hanas.io:192.168.128.41"
      - "dataiku:192.168.121.41"
      - "confluent:192.168.121.42"
      - "workflow:192.168.121.42"
      - "jbpm:192.168.128.41"
      - "autovault:192.168.128.41"
      - "chatbot:192.168.128.41"
      - "erd:192.168.128.41"
      - "datahub:192.168.128.41"
  ranger:
    image: nghnhhquang/ranger-admin:latest
    restart: always
    depends_on:
      ranger-zk:
        condition: service_started
      ranger-db:
        condition: service_healthy
      ranger-solr:
        condition: service_started
    environment:
      TZ: Asia/Jakarta
  nginx:
    image: nginx
    restart: always
    ports:
      - 443:443
      - 8080:8080
      - 11000:11000
      - 9002:9002
      - 5001:5001
      - 9092:9021
    extra_hosts:
      - "dataiku:192.168.121.41"
      - "confluent:192.168.121.42"
      - "workflow:192.168.121.42"
      - "autovault:192.168.128.41"
      - "chatbot:192.168.128.41"
      - "erd:192.168.128.41"
      - "gateway:192.168.128.41"
      - "jbpm:192.168.128.41"
      - "vault:192.168.128.41"
      - "datahub:192.168.128.41"
    environment:
      TZ: Asia/Jakarta
    volumes:
      - ./nginx-default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/nginx/certs:z
  ranger-db:
    image: nghnhhquang/ranger-postgres:latest
    restart: always
    healthcheck:
      test: 'su -c "pg_isready -q" postgres'
      interval: 10s
      timeout: 2s
      retries: 30
    environment:
      TZ: Asia/Jakarta
    volumes:
      - postgres-data:/var/lib/postgresql/data
  ranger-zk:
    image: nghnhhquang/ranger-zk:latest
    restart: always
    environment:
      TZ: Asia/Jakarta
  ranger-solr:
    image: nghnhhquang/ranger-solr:latest
    restart: always
    command:
      - solr-precreate
      - ranger_audits
      - /opt/solr/server/solr/configsets/ranger_audits/
    environment:
      TZ: Asia/Jakarta
    volumes:
      - solr-data:/var/solr/data/
  redis:
    image: redis
    restart: always
  jbpm:
    image: nghnhhquang/jbpm-server-poc:latest
    restart: always
    environment:
      JBPM_DB_DRIVER: postgres
      JBPM_DB_HOST: postgres-pam
    ports:
      - 8001:8001
      - 5501:8080
#docker run --rm --volumes-from pam-portal-postgres-1 -v $(pwd):/backup busybox tar cvf /backup/backup.tar /var/lib/postgresql/data
  postgres-pam:
    image: nghnhhquang/jbpm-postgres-poc
    restart: always
    volumes:
    - postgres-pam:/var/lib/postgresql/data
    environment:
      TZ: Asia/Jakarta
      POSTGRES_DB: jbpm
      POSTGRES_USER: jbpm
      POSTGRES_PASSWORD: jbpm
    healthcheck:
      test: 'su -c "pg_isready -q" postgres'
      interval: 10s
      timeout: 2s
      retries: 30
volumes:
  postgres-data:
  postgres-pam:
  solr-data:
  vault-logs:
  vault-data:
networks:
  default:
    name: hanas-poc_default